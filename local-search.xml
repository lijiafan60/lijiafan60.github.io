<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据库（面经）</title>
    <link href="/2022/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/"/>
    <url>/2022/05/07/%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面经整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统（面经）</title>
    <link href="/2022/05/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/"/>
    <url>/2022/05/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面经整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程(面经)</title>
    <link href="/2022/05/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/"/>
    <url>/2022/05/07/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面经整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java多线程</tag>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络（面经）</title>
    <link href="/2022/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/"/>
    <url>/2022/05/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面经整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础(面经)</title>
    <link href="/2022/05/07/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/"/>
    <url>/2022/05/07/Java%E5%9F%BA%E7%A1%80%EF%BC%88%E9%9D%A2%E7%BB%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>面经整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka</title>
    <link href="/2022/05/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/"/>
    <url>/2022/05/07/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Kafka/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么要用消息队列"><a href="#为什么要用消息队列" class="headerlink" title="为什么要用消息队列"></a>为什么要用消息队列</h1><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>如果服务调用链路过长，会导致用户等待时间过长，这时一些不需要及时完成的操作，就可以进行异步处理，减少用户等待时间。</p><p>比如一个抽奖项目，有参与<strong>抽奖–中奖–发奖</strong>这三个流程，可以中奖后直接返回中奖结果给用户，然后向消息队列发送消息，发奖的服务再去消息队列中取对应的消息，完成发奖操作。</p><h2 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h2><p>在类似秒杀活动中,为了避免流量一下子打到服务端，可以前置一个消息队列当作缓冲，服务端尽最大努力取消息队列消费消息，一些超时的请求可以直接返回错误。</p><h2 id="服务解耦"><a href="#服务解耦" class="headerlink" title="服务解耦"></a>服务解耦</h2><p>在商城项目中，用户下订单后，后端会根据生成的订单进行一系列操作，比如：vip等级变更，加积分等，如果这时候公司又要加一些其他服务，那么可能会影响到订单服务。这时候可以加一个发布-订阅模式的消息队列，订单服务生成订单后直接丢到消息队列里，其他下游服务需要订单信息的话再从消息队列中取就行了。</p><h1 id="消息队列会带来哪些问题，如何解决"><a href="#消息队列会带来哪些问题，如何解决" class="headerlink" title="消息队列会带来哪些问题，如何解决"></a>消息队列会带来哪些问题，如何解决</h1><h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p>Kafka中的多副本机制允许Partition拥有多个副本，多个副本间数据一致，正常情况下Producer和Consumer都和Leader进行交互。当一个Broker挂掉并且Leader就在这个Broker中，可以在剩余副本中重新选举Leader，来保证高可用性和安全性。</p><blockquote><p>为什么只能和leader交互？ 如果可以随意读写每个follower，就要考虑数据的一致性，会增加系统复杂度，降低容错性。</p></blockquote><h2 id="消息顺序"><a href="#消息顺序" class="headerlink" title="消息顺序"></a>消息顺序</h2><p>在一些业务中需要保证消息被消费的顺序，在Producer生产消息的时候可以把这些消息指定相同的key，这样它们都会进入同一个Partition，这样就保证了有序性。</p><h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><blockquote><p>消息丢失可以从以下三个方面考虑：</p></blockquote><h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><blockquote><p>生产者发送的消息因为网络原因并没有到达Broker导致消息丢失</p></blockquote><p>在调用send()函数发送完消息后，为了确保消息到达Broker，可以添加回调函数知道Broker时候接收到。另外可以把<strong>retries</strong>参数设置成&gt;3，可以实现自动重发消息。</p><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><blockquote><p>消费者接收消息后，自动提交offset，这时候消费者宕机了，就会导致消息丢失</p></blockquote><p>关闭自动提交offset，等处理完业务后，再手动提交。但是如果业务完成后宕机了，没有提交成功，当再次开始处理消息的时候，就会导致重复消费的问题。</p><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><blockquote><p>如果一个leader挂掉了，这时候数据还没来得及同步到副本中，信息就丢失了。</p></blockquote><p>可以设置 ：</p><ul><li><p>acks &#x3D; all</p><p>所有副本都<strong>接收</strong>消息后，才算发送成功</p></li><li><p>replication.factor &gt;&#x3D; 3</p><p>副本数量大于3</p></li><li><p>min.insync.replicas &gt; 1</p><p>消息至少被<strong>写入</strong>两个副本才算发送成功</p></li><li><p>unclean.leader.election.enable &#x3D; false</p><p>leader故障后只从和leader完全同步的副本中选举新leader</p></li></ul><h2 id="消息重复"><a href="#消息重复" class="headerlink" title="消息重复"></a>消息重复</h2><blockquote><p>Consumer消费完消息后，还没提交就挂了</p></blockquote><p>设计全局ID，做幂等性校验。</p><h2 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h2><ul><li>看能否提高服务端处理消息都速度，比如多次数据库插入，优化成批量插入</li><li>扩容，增加topic队列和消费者数量，<strong>（一个队列只会分配给一个消费者）</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息队列</tag>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在阿里云服务器上部署docker</title>
    <link href="/2022/05/04/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2docker/"/>
    <url>/2022/05/04/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2docker/</url>
    
    <content type="html"><![CDATA[<h1 id="在阿里云上部署docker"><a href="#在阿里云上部署docker" class="headerlink" title="在阿里云上部署docker"></a>在阿里云上部署docker</h1><h2 id="1-系统版本要求"><a href="#1-系统版本要求" class="headerlink" title="1. 系统版本要求"></a>1. 系统版本要求</h2><ul><li><p>服务器版本<strong>CentOS 8.x</strong> </p></li><li><p>服务器必须是 <strong>x86 64位</strong>系统</p></li><li><p>查看系统的内核版本</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# uname -r<br>4.18.0-348.7.1.el8_5.x86_64<br></code></pre></td></tr></table></figure></li><li><p>将yum更新到最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# sudo yum update<br>Last metadata expiration check: 1:22:43 ago on Wed 04 May 2022 03:01:02 PM CST.<br>Dependencies resolved.<br>Nothing to do.<br>Complete!<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-安装Docker"><a href="#2-安装Docker" class="headerlink" title="2. 安装Docker"></a>2. 安装Docker</h2><h3 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1. 安装依赖包"></a>1. 安装依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></td></tr></table></figure><p><em>本人因为已经安装过，就不展示对应的内容了，一般来说看到Complete就代表完成了。</em></p><h3 id="2-添加yum仓库"><a href="#2-添加yum仓库" class="headerlink" title="2. 添加yum仓库"></a>2. 添加yum仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h3 id="3-安装Docker"><a href="#3-安装Docker" class="headerlink" title="3. 安装Docker"></a>3. 安装Docker</h3><h4 id="3-1-默认安装最新版"><a href="#3-1-默认安装最新版" class="headerlink" title="3.1 默认安装最新版"></a>3.1 默认安装最新版</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# sudo yum install docker-ce<br></code></pre></td></tr></table></figure><h4 id="3-2-安装指定版本"><a href="#3-2-安装指定版本" class="headerlink" title="3.2 安装指定版本"></a>3.2 安装指定版本</h4><p>查看仓库中的Docker版本并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# yum list docker-ce --showduplicates | sort -r<br>Last metadata expiration check: 1:31:35 ago on Wed 04 May 2022 03:01:02 PM CST.<br>Installed Packages<br>docker-ce.x86_64               3:20.10.9-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.8-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.7-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.6-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.5-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.4-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.3-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.2-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.14-3.el8                docker-ce-stable <br>docker-ce.x86_64               3:20.10.14-3.el8                @docker-ce-stable<br>docker-ce.x86_64               3:20.10.1-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:20.10.13-3.el8                docker-ce-stable <br>docker-ce.x86_64               3:20.10.12-3.el8                docker-ce-stable <br>docker-ce.x86_64               3:20.10.11-3.el8                docker-ce-stable <br>docker-ce.x86_64               3:20.10.10-3.el8                docker-ce-stable <br>docker-ce.x86_64               3:20.10.0-3.el8                 docker-ce-stable <br>docker-ce.x86_64               3:19.03.15-3.el8                docker-ce-stable <br>docker-ce.x86_64               3:19.03.14-3.el8                docker-ce-stable <br>docker-ce.x86_64               3:19.03.13-3.el8                docker-ce-stable <br>Available Packages<br><br>[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# sudo yum install docker-ce-20.10.11.ce<br></code></pre></td></tr></table></figure><h3 id="4-启动Docker并添加开机启动"><a href="#4-启动Docker并添加开机启动" class="headerlink" title="4. 启动Docker并添加开机启动"></a>4. 启动Docker并添加开机启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# sudo systemctl start docker<br>[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# systemctl enable docker<br></code></pre></td></tr></table></figure><h2 id="2-Docker可视化界面安装"><a href="#2-Docker可视化界面安装" class="headerlink" title="2. Docker可视化界面安装"></a>2. Docker可视化界面安装</h2><h3 id="1-Portainer汉化包的下载与上传"><a href="#1-Portainer汉化包的下载与上传" class="headerlink" title="1. Portainer汉化包的下载与上传"></a>1. Portainer汉化包的下载与上传</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h4><p>链接：<a href="https://pan.baidu.com/s/1hVvP5msL6LObDAt-v-S-sw?pwd=rj5h">https://pan.baidu.com/s/1hVvP5msL6LObDAt-v-S-sw?pwd=rj5h</a><br>提取码：rj5h</p><h4 id="2-上传"><a href="#2-上传" class="headerlink" title="2. 上传"></a>2. 上传</h4><p>创建目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# mkdir -p /data/portainer/data /data/portainer/public<br></code></pre></td></tr></table></figure><p>将Portainer-CN中的文件上传到data&#x2F;portainer&#x2F;public目录下</p><h3 id="2-拉取Portainer"><a href="#2-拉取Portainer" class="headerlink" title="2. 拉取Portainer"></a>2. 拉取Portainer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# docker pull portainer/portainer<br></code></pre></td></tr></table></figure><h3 id="3-启动Portainer"><a href="#3-启动Portainer" class="headerlink" title="3. 启动Portainer"></a>3. 启动Portainer</h3><p>需要开启9000端口，可以在服务器安全组中开启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@iZ8vbd7wo3mhy6gadb8egyZ ~]# docker run -d --restart=always --name portainer -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v /data/portainer/data:/data -v /data/portainer/public:/public portainer/portainer<br></code></pre></td></tr></table></figure><h2 id="4-访问Portainer"><a href="#4-访问Portainer" class="headerlink" title="4. 访问Portainer"></a>4. 访问Portainer</h2><p>在<strong>http:&#x2F;&#x2F;服务器公网ip:9000</strong> 访问</p>]]></content>
    
    
    <categories>
      
      <category>环境部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>环境部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
